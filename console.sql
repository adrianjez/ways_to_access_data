--Osoba Table
CREATE TABLE OSOBA (
  ID INTEGER NOT NULL ,
  IMIE VARCHAR2(30) NOT NULL ,
  NAZWISKO VARCHAR2(30) NOT NULL,
  DATA_URODZENIA DATE NOT NULL,
  EMAIL VARCHAR2(20),
  TELEFON VARCHAR2(20),
  CONSTRAINT OSOBA_PK PRIMARY KEY (ID)
);



CREATE SEQUENCE OSOBA_SEQ;

CREATE OR REPLACE TRIGGER  OSOBA_TRG
BEFORE INSERT ON OSOBA
FOR EACH ROW
WHEN (new.ID IS NULL)
BEGIN
  SELECT OSOBA_SEQ.NEXTVAL
  INTO   :new.ID
  FROM   dual;
END;


ALTER TRIGGER OSOBA_TRG ENABLE ;

-- BOOKS TABLE
CREATE TABLE BOOKS(
  ID INTEGER NOT NULL,
  TYTUL VARCHAR2(30),
  ISBN VARCHAR2(30),
  ROK_WYDANIA NUMBER,
  ID_WYDAWNICTWA INTEGER NOT NULL,
  OPIS CLOB,
  URL_OKLADKI VARCHAR2(50),
  CONSTRAINT BOOKS_PK PRIMARY KEY (ID)
);

CREATE SEQUENCE BOOKS_SEQ;

CREATE OR REPLACE TRIGGER  BOOKS_TRG
BEFORE INSERT ON BOOKS
FOR EACH ROW
WHEN (new.ID IS NULL)
BEGIN
  SELECT BOOKS_SEQ.NEXTVAL
  INTO   :new.ID
  FROM   dual;
END;


ALTER TRIGGER BOOKS_TRG ENABLE ;

-- BOOKSREGISTRY
CREATE TABLE BOOKSREGISTRY (
  ID NUMBER NOT NULL,
  ID_KSIAZKI INTEGER NOT NULL,
  ID_OSOBY INTEGER NOT NULL,
  WYDANO DATE NOT NULL,
  ZWROT DATE,
  CONSTRAINT fk_book FOREIGN KEY (ID_KSIAZKI) REFERENCES BOOKS(ID),
  CONSTRAINT fk_user FOREIGN KEY (ID_OSOBY) REFERENCES OSOBA(ID)
);


CREATE SEQUENCE BOOKSREGISTRY_SEQ;

CREATE OR REPLACE TRIGGER BOOKS_REGISTRY_TRG
  BEFORE INSERT ON BOOKSREGISTRY
  FOR EACH ROW
  WHEN (new.ID IS NULL)
  BEGIN
    SELECT BOOKSREGISTRY_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

ALTER TRIGGER BOOKS_TRG ENABLE;


--Fill Test data
INSERT INTO OSOBA(IMIE, NAZWISKO, DATA_URODZENIA, EMAIL, TELEFON)
VALUES ('TestName', 'Ble Ble', TO_DATE('2003/05/03 21:02:44', 'yyyy/mm/dd hh24:mi:ss'), 'adrian@gmail.com', '032948');

INSERT INTO OSOBA(IMIE, NAZWISKO, DATA_URODZENIA, EMAIL, TELEFON)
VALUES ('Tomasz', 'Nowak', TO_DATE('1992/09/03 21:02:44', 'yyyy/mm/dd hh24:mi:ss'), 'pawelek@gmail.com', '0700880794');

/** Adding book as taken by user**/
INSERT INTO BOOKSREGISTRY(ID_KSIAZKI, ID_OSOBY, WYDANO)
VALUES (1, 8, CURRENT_DATE);

/** Changing book as returned **/
UPDATE BOOKSREGISTRY
    SET ZWROT = CURRENT_DATE
    WHERE ID_KSIAZKI = 1 AND ZWROT IS NULL;

SELECT  B.ID, B.TYTUL, B.ISBN, B.ROK_WYDANIA, B.OPIS, B.URL_OKLADKI ,
  (SELECT COUNT(*)
  FROM BOOKSREGISTRY R
  WHERE R.ID_KSIAZKI = B.ID AND R.ZWROT IS NULL) AS "COUNT_USERS"
FROM BOOKS B;


SELECT * FROM BOOKSREGISTRY;